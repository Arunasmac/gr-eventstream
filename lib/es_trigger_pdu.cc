/* -*- c++ -*- */
/*
 * Copyright 2011 Free Software Foundation, Inc.
 * 
 * This file is part of gr-eventstream
 * 
 * gr-eventstream is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * gr-eventstream is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with gr-eventstream; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <es/es.h>
#include <es/es_trigger_pdu.h>
#include <gnuradio/io_signature.h>
#include <stdio.h>
#include <string.h>

/*
 * Create a new instance of es_trigger_pdu and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
es_trigger_pdu_sptr 
es_make_trigger_pdu (int itemsize){
  return es_trigger_pdu_sptr (new es_trigger_pdu (itemsize));
}

es_trigger_pdu::es_trigger_pdu (int itemsize)
  : d_itemsize(itemsize),
    es_trigger ( "es_trigger_pdu",
        gr::io_signature::make(0,0, 0),
        gr::io_signature::make(0,0, 0))
{
    register_handler("pdu_event");
    message_port_register_in(pmt::mp("pdus"));
    set_msg_handler(pmt::mp("pdus"), boost::bind(&es_trigger_pdu::handle_pdu, this, _1));
}

void es_trigger_pdu::handle_pdu(pmt::pmt_t pdu){
    printf("got pdu in.\n");
}

es_trigger_pdu::~es_trigger_pdu ()
{
}

int 
es_trigger_pdu::work (int noutput_items,
			gr_vector_const_void_star &input_items,
			gr_vector_void_star &output_items)
{
  return noutput_items;
}


